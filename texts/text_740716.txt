

Какие уроки я извлёк из создания расширения VSCode с помощью GPT-4 / Habr


                Какие уроки я извлёк из создания расширения VSCode с помощью GPT-4 Level of difficulty  
    Medium
   Reading time  
    14 min
   Views  8.2K RUVDS.com corporate blog JavaScript *TypeScript *Artificial Intelligence Text editors and IDEs * 
    Tutorial
   
    Translation
     
                Original author:
                
                  Kevin Lin
                  

В последнее время я много экспериментировал с написанием кода при помощи LLM (Large Language Model, большая языковая модель). На мой взгляд, эти инструменты отлично справляются с генерацией небольших самодостаточных фрагментов. К сожалению, что-то большее уже требует человеческого участия для оценки результата LLM и предоставления дальнейших инструкций.


В большинстве случаев, когда кто-то утверждает, что «GPT написал X», человек выступает для LLM в роли своеобразного REPL (Read-Eval-Print Loop, цикл чтение-оценка-вывод), внимательно подводя модель к функциональному результату. Я нисколько не хочу принизить ценность этого процесса – очень здорово, что он работает. Но можем ли мы шагнуть дальше? Можем ли использовать LLM для генерации ВСЕГО кода сложной программы за раз без человеческого вмешательства?

Написание расширения VSCode

Чтобы проверить способность GPT-4 генерировать сложные программы, я попросил этот инструмент создать расширение VSCode, позволяющее пользователю корректировать уровень заголовка выбранного текста Markdown. Эта задача требует:


Предметного понимания того, как выполнить скаффолдинг и внедрить расширение в VSCode.
Комбинирования разных языков и платформ: расширения VSCode создаются на TypeScript, что требует написания конфигурации для самого Typescript, а также Node.js и VSCode.
Генерации множества файлов.
Создания схемы для отладки, сборки и выполнения кода.

