

Искусственный интеллект в разработке: как используют сейчас, что его ждет в будущем и боятся ли ИИ программисты / Habr


              14  August  2021 at 18:13  Искусственный интеллект в разработке: как используют сейчас, что его ждет в будущем и боятся ли ИИ программисты GetMatch.ru — ГетМэтч.ру corporate blog Programming *Machine learning *Artificial Intelligence The future is here       Не так давно Microsoft выкатил в публичный доступ ИИ Copilot. Он обучен на базе GitHub и помогает разработчикам дополнять код в зависимости от контекста. С нуля пока ничего не создает, но некоторые функции может написать целиком без участия программиста. И возникает вопрос — а не близок ли тот день, когда искусственный интеллект полностью заменит разработчиков, и, например, заставит их переквалифицироваться в бизнес-аналитиков.Мы побеседовали со специалистами по ИИ и Data Science, чтобы оценить реальные перспективы искусственного интеллекта. А еще спросили разработчиков, героев наших прошлых статей, что они думают об ИИ и не боятся ли потерять работу из-за технического прогресса. Приходите в комментарии и тоже делитесь своим мнением.Какие задачи ИИ уже автоматизируетВообще в разработке много задач, автоматизированных и без искусственного интеллекта. Те же библиотеки или фреймворки для frontend-разработки — уже автоматизация, и никакого ИИ тут не нужно. Андрей Васнецовlead ML-инженер и хозяин канала про нейросети«Что касается применения именно ИИ, или точнее Machine Learning, его уже давно используют в статистическом анализе кода. Плюс раньше пытались сделать умный автокомплит с помощью нейросетей, например, Deep TabNine. Они тогда не получались, но нынешний GitHub Copilot по факту отличается от них только количеством данных и ресурсов, потраченных на обучение.Пока искусственный интеллект лучше всего справляется с задачами, которые уже кто-то решал. Если в обучающей выборке есть нужные фрагменты кода — он их воспроизведет. Например, по этой причине Copilot так хорошо решает задачи из leetcode. Но в настоящей разработке таких задач не слишком много».Сергей Колесниковaka scitator«Сейчас AI, как бы это смешно ни звучало, шире всего используется именно для автоматизации разработки AI. Если мы корректно ставим задачу машинного обучения, выбираем датасеты и метрики, математически формулируем функциональные ограничения, то сама задача поиска лучшего решения — это задача оптимизации, и мы решаем ее методами машинного обучения. Хорошие пример тут — Neural Architecture Search и AutoML, инструменты для автоматизации перебора NN-архитектур под конкретные задачи. Google таким способом „придумал“ архитектуру EfficientNet, которая адаптирована под вычисления на мобильных девайсах.У нас в Catalyst.Team тоже есть простая команда catalyst-dl tune, которая позволяет автоматизировать перебор архитектур и их гиперпараметров. То есть с точки зрения автоматизации разработка ML-решений движется семимильными шагами. И ML-разработчикам, которые думают о своей работе как о переборе моделей, стоит задуматься — их ИИ вполне может заменить».Что сами разработчики хотели бы автоматизировать в своей работеСейчас разработчики склонны рассматривать ИИ не как своего врага или замену, а скорее как помощника. И многие рутинные задачи из своей работы они бы с радостью отдали на автоматизацию. Copilot уже помогает не искать готовые решения в сети. Но есть и другие задачи, с которыми ИИ потенциально мог бы справиться.Сергей Колесниковaka scitator«Я все жду, когда автоматизируют тестирование интерфейсов, как web/mobile, так и чатовых. Первичная проверка интерфейсов мне не кажется сложной задачей, которая меняется каждый раз, так что ее должно быть просто оптимизировать. Но я здесь не эксперт и подозреваю, что важнее проверять бизнес-логику под интерфейсами, и тут задачи уже могут сильно варьироваться. А вот проверка чат-интерфейсов — это интересное направление. Например, ИИ могут проверять, что все ответы носят нейтральный характер, или что диалоги проходят по заказанному сценарию.Я лично хотел бы автоматизировать тесты и написание документации. Было бы здорово, если бы Copilot развивался в этом направлении — например, по сигнатурам методов предлагал, как их тестировать. Написание кода — меньшая из проблем, а вот тесты и документация — это сложно и часто рутинно».Алина КоваленкоSenior Software Engineer в Uber, постоянный герой наших статей«Я жду, когда ИИ научится назначать задачи саппорта в нужные команды/проекты. Чтобы от техподдержки приходили баг репорты, а ИИ сам пинговал нужную команду и назначал им задачу».Почему ИИ не заменит разработчиков: ни сейчас, ни в будущем. Но явно изменит IT-индустриюВокруг Copilot уже возникла небольшая истерия — якобы благодаря нему некоторых разработчиков можно уволить, потому что работы для них теперь нет. Но это кажется преувеличенным. Вот что о «полной замене людей» думают специалисты по ИИ:Сергей Колесниковaka scitator«Когда люди видят успехи очередного AI, который „почти как человек“, они сразу бросаются менять и оптимизировать текущие процессы. Но есть нюанс — для реального использования ИИ вместо человека нужна примерно 100% точность, а пока это недостижимо. Особенно для задач, который носят последовательный характер — генерации текста или кода. Здесь малейшая ошибка в начале приводит к значительному отклонению в конце.Плюс важно понимать, что задача разработчика — не просто написать код. Куда больше времени занимает понимание задачи, перевод ее в техническую постановку. И для этого нужен человеческий опыт и умение понимать друг друга. С этим люди-то не всегда справляются, что уж говорить об AI. Все нынешние решения по автоматизации — это красивые обертки вокруг стандартных инструментов, и в ближайшее время это вряд ли изменится.Некоторые боятся, что ИИ заменит неопытных разработчиков, джуниоров. Но на самом деле понятие „джуниор“ и набор требуемых скилов для него все время меняется, специализируется, пока область работы становится сложнее. Часть навыков джуна просто отомрут, а часть наоборот, добавятся. Однако базовые вещи всегда будут с нами: математика, линейная алгебра, статистика, C++ 