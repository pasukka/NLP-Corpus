

Что такого в IT, что с ним все носятся. И когда всё это закончится / Habr


               Что такого в IT, что с ним все носятся. И когда всё это закончится  Reading time  
    21 min
   Views  46K Нетология corporate blog Data visualization *Research and forecasts in IT *Manufacture and development of electronics *Artificial Intelligence       Изначально хотел назвать статью «Почему у айтишников большие зарплаты и когда это закончится». Статья создана по мотивам внутренних митапов и докладов.Привет! Меня зовут Игорь Симдянов, я работаю архитектором решений в Нетологии, пишу книги, читаю курсы. Часто студенты, коллеги, знакомые задают вопрос о том, куда будет развиваться IT, не закончится ли оно завтра. Есть модные темы, которые не успев начаться сразу заканчиваются. IT у нас работает с прошлого столетия. Видимо, есть какой-то источник, который подпитывает интерес, может ли он исчерпаться и когда? Попробуем найти топливо IT, промоделировать развитие индустрии и предсказать признаки, по которым можно будет определить, что отрасль движется к стабилизации или деградации. Иными словами, попробуем заглянуть в будущее. Однако для этого надо слегка откатиться назад, чтобы посмотреть, как IT-отрасль развивалась. Тогда будет проще оценить, что нас ждёт впереди.Да, нам нужно ITОснова нашей цивилизации — инструменты. Мы не просто эволюционировали до состояния, которое позволило нам их использовать, мы сами стали их совершенствовать. Инструменты становятся всё замысловатее, эффективнее и совершеннее. Это может быть молоток, промышленный робот или денежные отношения. Некоторые из наших инструментов трудно охватить взглядом или осмыслить, они больше напоминают стихию или предмет изучения: интернет, СМИ, транспортная система. Их даже трудно назвать инструментами, скорее — это отражение нашей деятельности. Для простоты всё, что делают люди своими руками, мы будем называть инструментом, имея в виду, что они нас ускоряют, делают нашу жизнь проще и комфортнее.Зачем же нам нужны инструменты? С одной стороны, они помогают решать возникающие проблемы, с другой — повышают уровень жизни. Мы получаем удовольствие от создания инструментов. Я бы сказал, это один из наших инстинктов. Для функционирования нашего организма нужно какое-то количество математики. Процессы в нашей голове отражают эту математику на наш язык. Язык мы можем записать в виде символов. С помощью символов мы можем передать открытие одного человека другому или тысяче других. Это позволяет нам строить всё более сложные инструменты. А главное — нам это очень нравится: мозг поощряет нас каждый раз, когда мы что-то изобретаем или добиваемся. Поэтому наши инструменты развиваются вместе с нами. В нас зашиты механизмы их развития и совершенствования.Перелётные птицы летят осенью на юг, весной — на север. Это их инстинкт. Муравьи строят муравейник — это их инстинкт. Если людей оставить в сытости и покое, они начинают кодировать секретные послания в Библии, создавать сложный этикет, формировать математику, экспериментировать с материалами.Стивен Пинкер в своей книге «Язык как инстинкт» развивает идеи Ноама Хомского, что язык является инстинктом нашего вида. Люди за два поколения формируют язык — это зашито в мозге. Идея tabula rasa (чистая доска) не работает: мы не изобретали тысячелетиями наши языки, просто по факту рождения мы можем пользоваться языковыми структурами почти в готовом виде. Первые три года у человека включается «программа» на адаптацию к текущему языковому окружению. Многообразие языков обусловлено как раз тем, что люди не могут контролировать язык. Он постоянно изменяется, но это не является проблемой для вновь рождающихся, так как правила использования языков, программа развития у всех людей одна и та же. Главная особенность нашего вида: мы извлекли эволюцию из ДНК, так как научились кодировать и передавать информацию и передавать её не генетически, а в виде символов. Мы разговариваем на языках, делаем инструменты не потому, что нас к этому подталкивают обстоятельства, а потому что мы не можем этого не делать. Как перелетные птицы не могут не лететь осенью на юг, а весной — на север.Но давайте вернёмся к IT-отрасли. Зачем нам компьютеры и что это? Очень долго инструменты были статичными: палкой-копалкой расковыряли землю, дубинкой ударили дичь. Всё это требовало живого участия человека и его мускульной силы. С пониманием природы энергии и её обузданием у человека появились инструменты, которые могли работать почти без его участия. Водяная мельница, пар, энергия сгорания, а затем и электричество дало совершенно другой тип инструментов — машины. Теперь нет необходимости сгонять кучу народу в одно место, чтобы построить что-то большое. Машины по сравнению с человеком гораздо производительнее и обладают бОльшей силой.Однако машины не адаптируются. Один раз построенный водяной молот будет под действием соседней реки подниматься и опускаться. Превратить его в сверлильный станок на полчаса не получится, даже если очень надо. Ответом на это неудобство стали компьютеры — программируемые машины, поведение которых можно модифицировать. Программисты нужны, чтобы изменять поведение машин.Разработчики компьютеров или программ составляют рабочую силу IT-отрасли. Когда мы говорим про востребованность и заработные платы айтишников, речь идёт о разработчиках компьютеров и программ для этих компьютеров. Вместо того чтобы строить дома, варить нитробензол, работать на сухогрузе, или заниматься каким-то другим полезным и оплачиваемым занятием, разработчики возятся с компьютерами. Почему? Потому что на их услуги есть спрос.Если человечество найдёт другие способы справляться с проблемами, которые решают компьютеры, вся история с программированием и IT закончится, потому что оплачивать это будет некому и незачем. Почти все разработчики займутся другими делами, которые будут востребованы обществом. Айтишники не могут быть движущей силой сами по себе, результат их труда нужен людям. Это желание платить за компьютеры и программы порождает мощную IT-отрасль.Почему заработные платы у них выше, чем у других инженеров? Проектировать суда или электроподстанции не проще, чем создавать веб-формы и обслуживать CRUD-запросы. За IT-кадры идёт конкуренция, их не хватает. А как так получилось, что за 70 лет не было подготовлено нужного количества разработчиков? Для проектирования подстанций инженеров хватает, а куда деваются разработчики? Маловероятно, что в определённый период жизни им резко перестают быть нужны деньги, которые бизнес вливает в IT-сферу многие десятилетия. Как долго может продлиться такой период и что будет служить признаками перехода IT-отрасли в обычную не разогретую инженерную специальность? Попробуем ответить на эти вопросы ниже.Топливо для ITМы живём в уникальное время фактически взрывообразного развития компьютерной отрасли. На протяжении одного поколения у нас кардинально меняются технологии и языки. Жизнь IT-специалиста похожа на жизнь белки в колесе. Приобретаемые знания и опыт быстро устаревают: гораздо быстрее, чем это происходит в других профессиях.Мне кажется, что топливом, при помощи которого движется IT-отрасль, долгое время был закон Мура. Гордон Мур, основатель компании Intel, в 1970-х годах сформулировал эмпирическое правило. Оно гласит, что каждые 18 месяцев количество транзисторов в интегральных схемах удваивается. Обычно его отображают в логарифмической форме:Если мы отобразим его не в логарифмической шкале, а честно в штуках, то у нас получится экспонента.С 70-х годов прошлого столетия в IT-отрасли наблюдается экспоненциальный рост. Именно так происходит взрыв. Следствием этого является взрывообразное развитие всей компьютерной отрасли. Только мы какую-то технологию начинаем отрабатывать, совершенствоваться в ней, у нас появляются более мощные компьютеры, процессоры, видеокарты, и нам нужно переключаться на другую технологию — использовать подход, учитывающий возросшие возможности. Начинаем разрабатывать новую технологию, происходит что-то ещё: компьютеры объединяются в сети, появляется интернет, образуется новая отрасль. Выясняется, что интернетом пользуется множество людей, туда проваливаются целые страны. И вот у нас уже большие данные, с ними надо что-то делать, появляется ещё одна отрасль по их обработке. Не справляемся с большими данными — нужно подключать какие-то математические модели, нейросети, и вот у нас уже формируется направление искусственного интеллекта.Здесь я прямыми линиями нарисовал оптимистичную картину, как люди развивают отдельно взятую технологию (ассемблер, язык высокого уровня, базу данных). Закон Мура выступает двигателем этого взрывообразного процесса, но именно со стороны железа, вычислительных возможностей. Человеческое сознание не может развиваться экспоненциально. В лучшем случае оно развивается линейно: прорывы и открытия нарабатывают очень медленно, и они никак не хотят удваиваться каждые 18 месяцев. В IT-отрасли мы вынуждены жить в этой революционной ситуации десятилетиями. То есть растущая аппаратная часть постоянно меняет правила игры в отрасли. Меняется не просто язык, меняется подход к тому, как разрабатывать программы. Это приводит к тому, что концепции в языках программирования меняются скачками, примерно как у Томаса Куна в его «Структуре научных революций». Только здесь не нужно ждать, когда вымрут поколения учёных, действующих в старой парадигме. Здесь «умирает», точнее, устаревает железо. Для программирования нового железа приходит молодое поколение разработчиков с альтернативным подходом, часто с другими языками программирования и инструментами.Эта гипотеза отчасти объясняет, почему разработчиков не хватает: сосредоточившись на старых технологиях, не все успевают оперативно переключиться на новые. В свежих отраслях образуется дефицит, но молодые разработчики его закрывают: им не нужно забывать старые подходы, они сразу могут начать работать с последними технологиями.Поэтому законодательство не смогло загнать многие области IT под жёсткие лицензии. Такие попытки были, однако, на рынок постоянно выходят прорывные решения, которые отменяют старые. Если кто-то захочет прописать в законе, на каком ПО и как следует вести ту или иную деятельность, рост аппаратных возможностей может привести к тому, что конкуренты решат проблемы людей более эффективно (заменят обычную почту электронной). В результате законы становятся мертворождёнными. Например, прямо сейчас действует закон, что доставка писем разрешена только государству. Можно создать коммерческую службу доставки грузов, но не писем в конвертах. Вехи в ITДля того чтобы предсказывать будущее, нужно знать, где мы находимся сейчас. Пробежимся по основным вехам, чтобы понимать, где мы оказались.Вернёмся в середину прошлого века и посмотрим, как работали программисты. Вам вручают процессор, в котором все команды пронумерованы. Комбинация номеров команды и адресов — это программирование в кодах. Фактически такая программа — это готовый исполняемый файл, который процессор может исполнять напрямую. Например, 44-я команда складывает, а 23-я вычитает. Ячейки памяти тоже пронумерованы. Вот вы начинаете их комбинировать, и у вас получается длинная цепочка из цифр.cffa edfe 0700 0001 0300 0080 0200 0000
0f00 0000 5007 0000 8500 0000 0000 0000
1900 0000 4800 0000 5f5f 5041 4745 5a45
524f 0000 0000 0000 0000 0000 0000 0000
0000 0000 0100 0000 0000 0000 0000 000Программировать в кодах довольно утомительно, люди плохо запоминают числа. Кроме того, с выходом нового процессора номера команд изменяются, и программу приходится составлять заново. Поэтому разработчики создали ассемблер. Коды команд заменили на мнемоники — короткие буквенные сокращения, которые запоминать гораздо проще. setcom    proc    far
    push    ds
    push    es
    mov    ax,cs
    mov    ds,ax
    mov    es,ax
    pop    axАссемблер позволил создать долгоиграющие программы, такие как операционные системы. Но если архитектура процессора менялась, программу можно было выкидывать, потому что адаптировать её очень сложно.Все усилия и работа над программами идёт за счёт бизнеса, который извлекает прибыль. Задача коммерции считать деньги и оптимизировать расходы. Первый вопрос, который возникает у бизнеса: «Почему мы каждый раз переписываем программы? Давайте сделаем возможность переносить их с одного компьютера на другой». Так появились языки высокого уровня. Конечно, языки высокого уровня возникли не как требование коммерческих структур, но своё распространение они получили во многом благодаря бизнесу. С помощью языков высокого уровня можно написать программу один раз. Дальше, вне зависимости от того, какие новые процессоры у вас будут появляться, эта программа будет переносима. #include <stdio.h> 
int main()
{
	printf("hello world!");
	return 0;
}Можно писать операционные системы, игры, офис, и эти программы начинают жить годами. Они растут в объёмах, в них становится трудно разбираться, и следующим этапом становятся специализированные языки. Последние оперируют не компьютерными терминами, а сущностями предметной области. Вместо адресов, указателей и файлов, вы можете оперировать учётной ставкой, налогом, счётом, сотрудником. Составлять программы на языке предметной области гораздо удобнее. Список = Новый СписокЗначений();
Список.Добавить("ВвестиСчетФактуру", "Счет-фактура");Здесь 