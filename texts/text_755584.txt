

Обработка и анализ естественного языка с помощью Python-библиотеки spaCy / Habr


               Обработка и анализ естественного языка с помощью Python-библиотеки spaCy  Reading time  
    9 min
   Views  2.7K OTUS corporate blog Python *Natural Language Processing *      Обработка естественного языка (NLP) представляет собой важную область исследований, объединяющую лингвистику, компьютерные науки и искусственный интеллект. Она посвящена разработке методов и инструментов для анализа, понимания и генерации текста человеческими искусственными системами. Важность NLP становится все более явной, поскольку она находит применение в различных сферах, включая автоматический перевод, анализ тональности, извлечение информации, вопросно-ответные системы и многое другое.В мире обработки естественного языка существует множество инструментов и библиотек, предназначенных для упрощения этой сложной задачи. Однако библиотека spaCy выделяется своей эффективностью и производительностью. Она разработана с акцентом на скорость и точность, что делает ее предпочтительным выбором для многих разработчиков и исследователей в области NLP.Обработка естественного языка – это не только наука, но и искусство. Верность интерпретации текста, умение извлекать скрытые смыслы и генерировать «человекопонимаемый» контент – все это требует глубокого понимания инструментов, которые мы используем. spaCy становится вашим надежным союзником в этом креативном процессе, и давайте вместе исследуем, как он может вдохновить нас на создание потрясающих решений.Основные концепции spaCyТокенизация и сегментация текстаОдним из первых шагов в обработке естественного языка является разделение текста на более мелкие единицы, такие как слова и предложения. Этот процесс называется токенизацией. SpaCy обладает мощными инструментами для токенизации и сегментации текста, позволяя эффективно разбивать текст на смысловые компоненты.Разделение текста на слова и пунктуациюПроцесс разделения текста на отдельные слова и пунктуационные символы является основой для большинства анализов в NLP. SpaCy предоставляет нам простой и эффективный способ этого сделать. Давайте рассмотрим пример:import spacy
# Загружаем языковую модель
nlp = spacy.load("en_core_web_sm")
# Входной текст
text = "spaCy is an amazing tool for natural language processing."
# Применяем токенизацию
doc = nlp(text)
# Выводим токены (слова и пунктуацию) из текста
for token in doc:
    print(token.text)В данном примере мы используем предварительно обученную английскую языковую модель (en_core_web_sm), загружаем ее с помощью spacy.load(). Затем мы передаем текст через эту модель, получаем объект Doc и можем итерироваться по токенам, выводя их текст.Разбиение текста на предложенияЧасто текст состоит не только из слов, но и из предложений. SpaCy обеспечивает удобный способ разделения текста на предложения:import spacy
# Загружаем языковую модель
nlp = spacy.load("en_core_web_sm")
# Входной текст с несколькими предложениями
text = "SpaCy is fast. It's also efficient."
# Применяем разбиение на предложения
doc = nlp(text)
# Выводим предложения из текста
for sentence in doc.sents:
    print(sentence.text)
Здесь мы используем метод doc.sents, который автоматически распознает предложения в тексте и возвращает их в виде отдельных объектов Span.II. Основные концепции spaCyЧастеречная разметка (POS-тегирование)Определение частей речи словЧастеречная разметка (Part-of-Speech tagging или POS-тегирование) – это процесс присвоения каждому слову в тексте определенной метки, соответствующей его грамматической роли. SpaCy предоставляет мощные инструменты для выполнения этой задачи.Давайте рассмотрим пример:import spacy
# Загружаем языковую модель
nlp = spacy.load("en_core_web_sm")
# Входной текст
text = "I like to read books."
# Применяем анализ
doc = nlp(text)
# Выводим слова и их части речи
for token in doc:
    print(token.text, token.pos_)
В этом примере мы используем свежезагруженную английскую языковую модель (en_core_web_sm), создаем объект Doc для входного текста и итерируем по токенам (словам), выводя текст каждого токена и его часть речи.Значение частей речи для анализа текстаЧасти речи являются ключевыми элементами анализа текста, поскольку они раскрывают структуру и смысл предложения. Различные части речи могут указывать на субъект, объект, действие, качество и т.д. Эта информация имеет большое значение для множества приложений, от анализа тональности до извлечения информации.Лемматизация и нормализацияПриведение слов к их базовой формеЛемматизация - это процесс приведения слова к его базовой форме (лемме) путем удаления окончаний и суффиксов. Это помогает унифицировать различные формы слова и улучшить точность анализа.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "running dogs are happily barking"
doc = nlp(text)
for token in doc:
    print(token.text, token.lemma_)
Важность лемматизации при анализе текстаЛемматизация позволяет снизить размерность данных, учитывая только базовые формы слов. Это особенно полезно, например, при анализе тональности, чтобы учесть все формы одного слова, когда выражается какой-либо оттенок.Именованная сущность (NER) извлечениеОбнаружение и классификация именованных сущностейИменованные сущности (Named Entities) - это объекты реального мира, которые можно идентифицировать по имени, такие как имена людей, места, даты, организации и т.д. Извлечение и классификация именованных сущностей является важной задачей в NLP. SpaCy предоставляет удобные инструменты для этой цели.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "Apple is going to build a new office in London in 2023."
doc = nlp(text)
for ent in doc.ents:
    print(ent.text, ent.label_)
Применение NER в задачах информационного поискаИзвлечение именованных сущностей имеет множество применений. В информационном поиске, например, оно может быть использовано для автоматической классификации документов по тематикам, выделения ключевых фактов или для создания связей между сущностями.Работа с векторными представлениями  Встроенные векторы словПонятие векторного представления словВекторные представления слов - это числовые векторы, представляющие слова в многомерном пространстве таким образом, что семантически близкие слова имеют близкие векторы. Это понятие основано на гипотезе о дистрибутивности, согласно которой слова, используемые в похожих контекстах, имеют схожие значения.Использование встроенных векторов слов в spaCyОдной из мощных особенностей spaCy является наличие встроенных векторов слов, которые могут быть использованы для анализа семантической близости и сходства между словами. Эти векторы обучены на больших объемах текста и позволяют сравнивать слова на основе их семантического значения.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
# Получаем векторное представление слова "cat"
vector_cat = nlp("cat").vector
# Получаем векторное представление слова "dog"
vector_dog = nlp("dog").vector
# Вычисляем косинусное расстояние между векторами
similarity = vector_cat.dot(vector_dog) / (vector_cat.norm() * vector_dog.norm())
print("Similarity between 'cat' and 'dog':", similarity)
Пользовательские векторыОбучение собственных векторных представлений на корпусе текстовВ некоторых случаях может потребоваться обучить собственные векторные представления слов на специфическом корпусе текстов. Это особенно полезно, если вы работаете с узкоспециализированной терминологией или имеете доступ к большому объему текстов данных.Пример:import spacy
from gensim.models import Word2Vec
# Загружаем языковую модель
nlp = spacy.load("en_core_web_sm")
# Подготавливаем текстовый корпус
corpus = ["I like cats.", "Dogs are friendly.", "Cats and dogs are pets."]
# Токенизируем и лемматизируем текст
processed_corpus = []
for doc in nlp.pipe(corpus):
    processed_corpus.append([token.lemma_ for token in doc])
# Обучаем модель Word2Vec
model = Word2Vec(processed_corpus, vector_size=100, window=5, min_count=1, sg=0)
# Сохраняем модель
model.save("custom_word_vectors.model")
Применение пользовательских векторов в задачах классификации и кластеризацииПользовательские векторные представления слов могут быть использованы в различных задачах машинного обучения, таких как классификация и кластеризация. Например, вы можете использовать эти векторы для обучения модели классификации тональности текста или для кластеризации похожих документов.Пример:from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
# Загружаем модель Word2Vec
custom_model = Word2Vec.load("custom_word_vectors.model")
# Получаем векторное представление слова "cat"
vector_cat = custom_model.wv["cat"]
# Получаем векторное представление слова "dog"
vector_dog = custom_model.wv["dog"]
# Подготавливаем данные для классификации
X = [vector_cat, vector_dog]
y = ["animal", "animal"]
# Обучаем модель классификации
classifier = SVC()
classifier.fit(X, y)
# Тестируем модель
test_vector = custom_model.wv["dog"]
predicted_label = classifier.predict([test_vector])[0]
print("Predicted label for 'dog':", predicted_label)Векторные представления слов открывают двери к множеству интересных задач. Они позволяют не только анализировать близость слов, но и использовать эту информацию для решения более сложных задач, таких как классификация и кластеризация. Ваша способность создавать и использовать собственные векторы дает вам бескрайний потенциал в области анализа текста.Синтаксический анализ  Дерево зависимостейСтруктура дерева зависимостейСинтаксический анализ, также известный как анализ зависимостей, является важной частью обработки естественного языка. Он фокусируется на выявлении синтаксических отношений между словами в предложении. Для визуализации этих отношений используется дерево зависимостей, которое является графическим представлением структуры предложения.Использование дерева зависимостей для анализа отношений между словамиДерево зависимостей позволяет нам легко увидеть, какие слова являются главными, а какие зависимыми, а также какие синтаксические отношения связывают их. В spaCy можно получить дерево зависимостей для предложения с помощью метода .print_tree().Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "The cat chased the mouse."
doc = nlp(text)
# Выводим дерево зависимостей
for token in doc:
    print(token.text, token.dep_, token.head.text)
Грамматические отношенияПонятие синтаксических отношений (субъект, объект и др.)Синтаксические отношения определяют, как слова связаны между собой в предложении. Некоторые из ключевых синтаксических отношений включают субъект, объект, прямое дополнение, косвенное дополнение и т.д. Эти отношения помогают нам понимать семантическую структуру предложения.Примеры использования грамматических отношений для извлечения информацииГрамматические отношения могут быть использованы для извлечения семантической информации из текста. Рассмотрим пример использования грамматических отношений для определения семантической роли слова в предложении.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "The cat chased the mouse."
doc = nlp(text)
# Извлекаем грамматические отношения и семантические роли
for token in doc:
    if token.dep_ == "nsubj":
        print(f"Subject: {token.text}")
    elif token.dep_ == "dobj":
        print(f"Direct Object: {token.text}")
    elif token.dep_ == "prep":
        print(f"Preposition: {token.text}")
Синтаксический анализ дает нам обширный инсайт в то, как слова связаны между собой в предложении, и как эти отношения могут повлиять на их значения. Помимо анализа грамматической структуры, дерево зависимостей может быть использовано для выявления более сложных синтаксических конструкций и семантических связей.Примеры практических задач SpaCyАнализ тональности текстаАнализ тональности текста является важным компонентом анализа настроений и мнений в текстовых данных. SpaCy, хотя и не является специализированной библиотекой для анализа тональности, может быть полезным инструментом для предварительной обработки и анализа текстов перед применением специализированных методов.Пример:import spacy
from textblob import TextBlob
nlp = spacy.load("en_core_web_sm")
text = "I love this product. It's amazing!"
doc = nlp(text)
# Используем TextBlob для анализа тональности
analysis = TextBlob(text)
# Оцениваем настроение текста
sentiment = analysis.sentiment.polarity
if sentiment > 0:
    sentiment_label = "positive"
elif sentiment < 0:
    sentiment_label = "negative"
else:
    sentiment_label = "neutral"
print(f"Sentiment: {sentiment_label}")
Извлечение ключевых словИзвлечение ключевых слов из текста помогает сжать информацию и выделить самые важные аспекты содержания. SpaCy предоставляет возможность извлекать ключевые слова, используя частоту слов или их семантическое значение.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "Natural language processing is a field of study focused on making sense of text data."
doc = nlp(text)
# Извлекаем ключевые слова на основе частоты
keywords_freq = [token.text for token in doc if not token.is_stop and token.is_alpha]
# Извлекаем ключевые слова на основе веса встроенных векторов
keywords_semantic = [token.text for token in doc if not token.is_stop and token.vector_norm > 0]
print("Keywords based on frequency:", keywords_freq)
print("Keywords based on semantics:", keywords_semantic)
Автоматическая аннотация текстовАвтоматическая аннотация текстов позволяет автоматически добавлять дополнительные метаданные к текстам. Это может быть полезно, например, при создании информационных ресурсов, где необходимо предоставить пользователям дополнительные сведения о тексте.Пример:import spacy
nlp = spacy.load("en_core_web_sm")
text = "John is a data scientist working in a tech company."
doc = nlp(text)
# Добавляем аннотацию с информацией о профессии и компании
doc.ents = [(doc[3:5], "PERSON"), (doc[8:11], "ORG")]
# Выводим аннотированный текст
for ent in doc.ents:
    print(ent.text, "-", ent.label_)
SpaCy позволяет не только анализировать тексты, но и добавлять к ним дополнительные метаданные для обогащения контента. Это может быть полезно при создании разнообразных приложений, таких как информационные порталы, поисковые системы и многие другие.ЗаключениеМы рассмотрели ключевые концепции, начиная от токенизации и разметки частей речи, до анализа синтаксиса и работы с векторными представлениями слов. Благодаря spaCy, мы научились извлекать сущности, анализировать тональность текста и автоматически аннотировать документы. Все, что мы рассмотрели в данной статье, представляет лишь вершину айсберга в мире возможностей, которые предоставляет spaCy. Чтобы полностью овладеть всеми аспектами библиотеки и максимально эффективно применять её в реальных проектах, рекомендуется продолжать изучать документацию, участвовать в сообществе и практиковать на реальных данных. В заключение рекомендую аналитикам данных посетить открытый урок, посвященный базовому сбору требований. В результате занятия у участников появятся методические материалы по работе с заказчиком в ходе решения задачи по анализу данных. Также преподаватель поделится полезными советами по организации эффективного взаимодействия с заказчиком в бизнес-реалиях. Записаться можно на странице онлайн-курса «Аналитик данных».      Tags: spacypythonаналитика данных  Hubs: OTUS corporate blogPythonNatural Language Processing          


